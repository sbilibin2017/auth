version: "3.8"

volumes:
  db_data:
  cache_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - "${ZOOKEEPER_PORT}"    

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    expose:
      - "${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  db:
    image: postgres:${POSTGRES_VERSION}    
    restart: always
    env_file:
      - .env 
    volumes:
      - db_data:/var/lib/postgresql/data/ 
    expose:
      - "${POSTGRES_PORT}"

  cache:
    image: redis:${REDIS_VERSION}
    restart: always
    env_file:
      - .env 
    volumes:
      - cache_data:/data
    expose:
      - "${REDIS_PORT}"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c ./docker-entrypoint.sh
    env_file:
      - .env  
    volumes:
      - .:/app    
    expose:
      - "${APP_PORT}"
    depends_on:
      - kafka
      - db
      - cache

  nginx:
    image: nginx:${NGINX_VERSION}
    restart: always
    depends_on:
      - app    
    env_file:
      - .env  
    volumes:
      - ./nginx/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/etc/nginx/conf.d/default.conf.tmp:/etc/nginx/conf.d/default.conf.tmp
    command: >
      /bin/bash -c "envsubst \"`for v in $$(compgen -v);do printf '$${%s} ' $$v;done`'\"
      < /etc/nginx/conf.d/default.conf.tmp
      > /etc/nginx/conf.d/default.conf
      && nginx -g 'daemon off;'"    
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}